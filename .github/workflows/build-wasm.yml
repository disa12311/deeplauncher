name: Build WASM (auto-detect crate) and upload artifacts

# Triggers: push to main (ignore changes inside public/wasm), or manual dispatch
on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'public/wasm/**'
  workflow_dispatch:
    inputs:
      out_dir:
        description: 'wasm-pack output dir (relative to repo root)'
        required: false
        default: 'wasm/pkg'
      public_wasm_dir:
        description: 'Where to copy artifacts for Vercel (relative to repo root)'
        required: false
        default: 'public/wasm/pkg'
      skip_cache:
        description: 'Set to true to skip cargo cache'
        required: false
        default: 'false'

jobs:
  build-wasm:
    runs-on: ubuntu-latest
    env:
      OUT_DIR: ${{ github.event.inputs.out_dir || 'wasm/pkg' }}
      PUBLIC_WASM_DIR: ${{ github.event.inputs.public_wasm_dir || 'public/wasm/pkg' }}
      SKIP_CACHE: ${{ github.event.inputs.skip_cache || 'false' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Show repo root for debugging
        run: |
          echo "Workspace: $GITHUB_WORKSPACE"
          ls -la .

      - name: Auto-detect Cargo.toml (first match, excluding artifact folders)
        id: detect
        run: |
          set -e
          echo "Searching for Cargo.toml..."
          CT=$(find . -type f -name Cargo.toml \
            -not -path "./public/wasm/*" \
            -not -path "./wasm/*" \
            -not -path "./target/*" \
            -not -path "./**/target/*" | sed -n '1p' || true)
          if [ -z "$CT" ]; then
            echo "No Cargo.toml found. Exiting."
            exit 1
          fi
          CRATE_DIR=$(dirname "$CT")
          echo "Found Cargo.toml at: $CT"
          echo "crate_dir=$CRATE_DIR" >> $GITHUB_OUTPUT

      - name: Set up Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Optionally cache cargo registry & git (speeds up builds)
        if: env.SKIP_CACHE != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Add wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Install wasm-pack if missing
        run: |
          if ! command -v wasm-pack >/dev/null 2>&1; then
            echo "Installing wasm-pack..."
            curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          else
            echo "wasm-pack present: $(wasm-pack --version)"
          fi

      - name: Show environment (debug)
        run: |
          rustc --version || true
          cargo --version || true
          wasm-pack --version || true
          uname -a || true

      - name: Build with wasm-pack (using detected crate)
        id: build
        run: |
          set -x
          CRATE_DIR="${{ steps.detect.outputs.crate_dir }}"
          echo "Building crate in: $CRATE_DIR"
          # If crate is not root, use --manifest-path
          if [ "$CRATE_DIR" != "." ] && [ -f "${CRATE_DIR}/Cargo.toml" ]; then
            wasm-pack build --manifest-path "${CRATE_DIR}/Cargo.toml" --target web --out-dir "${OUT_DIR}" --release
          else
            wasm-pack build --target web --out-dir "${OUT_DIR}" --release
          fi
          echo "wasm-pack finished. Output dir: ${OUT_DIR}"

      - name: Prepare public wasm dir and copy artifacts
        run: |
          echo "Preparing ${PUBLIC_WASM_DIR}"
          mkdir -p "${PUBLIC_WASM_DIR}"
          rsync -av --delete "${OUT_DIR}/" "${PUBLIC_WASM_DIR}/"
          echo "Copied wasm pkg -> ${PUBLIC_WASM_DIR}"
          echo "Contents of ${PUBLIC_WASM_DIR}:"
          ls -la "${PUBLIC_WASM_DIR}" || true

      - name: Upload built pkg artifact for download
        uses: actions/upload-artifact@v4
        with:
          name: wasm-pkg
          path: ${{ env.OUT_DIR }}

      - name: Final status
        run: |
          echo "Build job completed. Artifact uploaded as 'wasm-pkg'."
          echo "If you want CI to commit artifacts into repository automatically, re-run workflow with adjusted step (not recommended by default)."
