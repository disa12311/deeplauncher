name: Build WASM (wasm-pack) and upload artifacts

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'public/wasm/**'
  workflow_dispatch:
    inputs:
      crate_path:
        description: 'Path to Rust crate containing Cargo.toml (e.g. ".", "engine")'
        required: false
        default: '.'
      out_dir:
        description: 'wasm-pack output dir (relative to repo root)'
        required: false
        default: 'wasm/pkg'
      public_wasm_dir:
        description: 'Where to copy artifacts for Vercel (relative to repo root)'
        required: false
        default: 'public/wasm/pkg'
      skip_cache:
        description: 'Set to true to skip cache restore/save'
        required: false
        default: 'false'

jobs:
  build-wasm:
    runs-on: ubuntu-latest
    env:
      CRATE_PATH: ${{ github.event.inputs.crate_path || '.' }}
      OUT_DIR: ${{ github.event.inputs.out_dir || 'wasm/pkg' }}
      PUBLIC_WASM_DIR: ${{ github.event.inputs.public_wasm_dir || 'public/wasm/pkg' }}
      SKIP_CACHE: ${{ github.event.inputs.skip_cache || 'false' }}
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Cache cargo registry & index
        if: env.SKIP_CACHE != 'true'
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Add wasm target
        run: rustup target add wasm32-unknown-unknown

      - name: Install wasm-pack if missing
        run: |
          if ! command -v wasm-pack >/dev/null 2>&1; then
            echo "Installing wasm-pack..."
            curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
          else
            echo "wasm-pack present: $(wasm-pack --version)"
          fi

      - name: Show Rust/Cargo versions (debug)
        run: |
          rustc --version || true
          cargo --version || true
          uname -a
          lsb_release -a || true

      - name: Build with wasm-pack (release)
        id: build
        run: |
          echo "CRATE_PATH=${CRATE_PATH}"
          echo "OUT_DIR=${OUT_DIR}"
          set -x
          if [ "${CRATE_PATH}" != "." ] && [ -f "${CRATE_PATH}/Cargo.toml" ]; then
            wasm-pack build --manifest-path "${CRATE_PATH}/Cargo.toml" --target web --out-dir "${OUT_DIR}" --release
          else
            wasm-pack build --target web --out-dir "${OUT_DIR}" --release
          fi
          echo "wasm-pack completed"
        env:
          RUSTFLAGS: "-C target-feature=+atomics,+bulk-memory,+mutable-globals"

      - name: Prepare public wasm dir and copy artifacts
        run: |
          echo "Preparing ${PUBLIC_WASM_DIR}"
          mkdir -p "${PUBLIC_WASM_DIR}"
          rsync -av --delete "${OUT_DIR}/" "${PUBLIC_WASM_DIR}/"
          echo "Copied wasm pkg -> ${PUBLIC_WASM_DIR}"
          ls -la "${PUBLIC_WASM_DIR}" || true

      - name: Upload built pkg artifact
        uses: actions/upload-artifact@v4
        with:
          name: wasm-pkg
          path: ${{ env.OUT_DIR }}

      - name: Print quick debug summary
        if: failure()
        run: |
          echo "=== Build failed. Show last 200 lines of workflow log (if available) ==="
          # no generic access to previous step logs here, but we'll print filesystem status
          ls -la || true
          echo "OUT_DIR contents:"
          ls -la "${OUT_DIR}" || true
          echo "PUBLIC_WASM_DIR contents:"
          ls -la "${PUBLIC_WASM_DIR}" || true